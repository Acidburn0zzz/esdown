== Maybe Features ==

- Rest parameters:

  function f(a, b, ...rest) { }
  function f(a, b) { var rest = Array.prototype.slice.call(arguments, 2); }
  
- Spread:

  // In argument lists:
  x.f(a, b, ...array);
  f.apply(x, [a, b].concat(array)));
  
  // In array literals:
  [ a, b, ...array, c, d ];
  ([ a, b ]).concat(array).concat([ c, d ]);

- Parameter defaults (waiting on scope issue consensus)

- Destructuring everything

- Map, Set polyfills.

- Array comprehensions


== Nope ==

- Let and const:  block declarations fall apart with per-iteration bindings.  It's
  possible to hack by using try statements, but that goes against our stance against
  rewriting.  And performance?
- Generators, yield.  It can be done, but transformation to CPS is complex and 
  consititutes rewriting.
- Replace all occurances of imported declarations with member expressions 
  (MODULE.exportedName), in order to support cyclical dependencies.  This is a
  significant caveat